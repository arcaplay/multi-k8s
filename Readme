///Path to Production///
#Chapter 191-232
#Pre-requiresite
cd /c/Users/SuppakiatP/arcaplay/complex
docker ps           => "No process runngin"
docker-compose up   => "No error after startup"
http://localhost:3050/  => "insert number and refresh"

#Node Diagram
Traffic ---->  Nginx Ingress  ---->  ClusterIP: multi-client
                              ---->  ClusterIP: multi-server  ----> ClusterIP: Redis
                                                                             : multi-worker
                                                              ----> ClusterIP: Postgres ----> Postgres PVC

#Create config file for Deployment and Service
mkdir k8s && cd k8s
vi client-deployment.yaml           => "Multi-Client Deployment"
vi server-deployment.yaml           => "Multi-Server Deployment"
vi worker-deployment.yaml           => "Multi-Worker Deployment"
vi redis-deployment.yaml            => "Redis Deployment"
vi postgres-deployment.yaml         => "Postgres Deployment"

vi client-cluster-ip-service.yaml   => "Multi-Client Service"
vi server-cluster-ip-service.yaml   => "Multi-Server Service"
vi redis-cluster-ip-service.yaml    => "Redis Service"
vi postgres-cluster-ip-service.yaml => "Postgres Service"

vi database-persistent-volume-claim.yaml    => "Persistent Volume Claim for Database"
vi database-persistent-volume.yaml    => "Persistent Volume for Database"

vi ingress-service.yaml             => "Nginx Ingress github.com/kubenetes/ingress-nginx"

#Create an Encoding 
kubectl create secret generic pgpassword --from-literal PGPASSWORD=12345
kubectl get secrets

#Setting up Ingress with Docker Desktop's Kubernetes
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud-generic.yaml
kubectl get svc -n ingress-nginx

#Test locally
kubectl apply -f k8s
kubectl get deployments
kubectl get services
kubectl get pods
kubectl get storageclass
kubectl describe storageclass
kubectl get pvc
https://localhost/

#K8S Dashboard
curl -O https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
kubectl apply -f kubernetes-dashboard.yaml
kubectl proxy
http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/

#Creating sample user
vi dashboard-adminuser.yaml
kubectl apply -f dashboard-adminuser.yaml
kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
